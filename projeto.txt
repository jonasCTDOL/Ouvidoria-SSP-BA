"Classificador de Manifesta√ß√µes" em HTML/CSS/JS, que se alinha ao seu projeto:
üíª Prompt Prot√≥tipo para Gera√ß√£o de Site no Manus AI
Copie e cole este texto no campo de prompt do Manus, ajustando as informa√ß√µes entre colchetes [ ] conforme necess√°rio.
**CONTEXTO:**
Sou um desenvolvedor na Ouvidoria-Geral da SSP-BA e preciso de um **prot√≥tipo funcional** de um classificador para manifesta√ß√µes de cidad√£os. O objetivo √© testar a interface de classifica√ß√£o antes de integrar com o sistema de back-end.

**OBJETIVO (Produto Final):**
Gerar todos os arquivos necess√°rios (HTML, CSS e JavaScript) para criar um **Web App de p√°gina √∫nica (SPA)** que classifique textos.

**FUNCIONALIDADES OBRIGAT√ìRIAS:**
1.  **Campo de Entrada:** Um campo de texto grande (textarea) para o usu√°rio colar a manifesta√ß√£o do cidad√£o.
2.  **Bot√£o de A√ß√£o:** Um bot√£o "Classificar Manifesta√ß√£o".
3.  **√Årea de Resultados:** Uma se√ß√£o limpa para exibir a **classifica√ß√£o sugerida** ap√≥s o clique, no formato JSON.

**ESPECIFICA√á√ïES T√âCNICAS:**
* **Front-end:** HTML5, CSS puro, e JavaScript (JS). **N√£o utilize React, Vue ou frameworks complexos.** O c√≥digo deve ser leve e funcionar localmente no navegador.
* **Design:** Design minimalista, com foco em usabilidade e cores institucionais. Use as cores da SSP-BA: Azul Escuro (`#003366`) para o cabe√ßalho e Amarelo Dourado (`#FFC300`) para os bot√µes.

**ETAPAS DE ENTREGA (Checklist para o Manus):**
1.  Crie o arquivo **`index.html`** (estrutura b√°sica e campo de entrada).
2.  Crie o arquivo **`styles.css`** (estiliza√ß√£o do layout e das cores).
3.  Crie o arquivo **`script.js`** (l√≥gica de classifica√ß√£o e exibi√ß√£o de resultados).
4.  No arquivo `script.js`, **implemente apenas a fun√ß√£o de interface `classificarTexto(texto)`**, que, por enquanto, deve retornar um **JSON simulado** para fins de prototipagem (n√£o precisa de IA real, apenas simular a resposta).

**JSON de Retorno SIMULADO (Modelo de Exemplo):**
O JSON de sa√≠da deve ter a seguinte estrutura (simulada):

```json
{
  "especie_sugerida": "RECLAMA√á√ÉO",
  "natureza_sugerida": "ATENDIMENTO_RUIM", 
  "confianca": "m√©dia",
  "justificativa": "Texto classificado como reclama√ß√£o devido √† insatisfa√ß√£o com a demora.",
  "elementos_identificados": ["demora_prazo", "insatisfa√ß√£o"]
}

ENTREGA FINAL (OUTPUT):
Gere um pacote ZIP contendo os tr√™s arquivos (index.html, styles.css, script.js) e forne√ßa o link para download no Workspace do Manus.

---

## Por que este prompt √© eficaz no Manus AI

* **Define o Papel (`CONTEXTO`):** Ajuda a IA a entender a finalidade do projeto (Ouvidoria, prot√≥tipo).
* **Evita Complexidade (`ESPECIFICA√á√ïES T√âCNICAS`):** Ao proibir frameworks, voc√™ garante que o Manus utilize modelos mais simples (e potencialmente **menos custosos em cr√©ditos**) focados em HTML/CSS/JS puros.
* **Entrega Estruturada (`ETAPAS DE ENTREGA`):** O checklist for√ßa o Manus a seguir uma sequ√™ncia l√≥gica e produzir os arquivos separados que voc√™ precisa.
* **Simula√ß√£o (Ganho de Cr√©dito):** Ao pedir um **JSON simulado** no `script.js`, voc√™ evita que o Manus tente implementar uma l√≥gica de IA real no JavaScript do cliente, que seria imposs√≠vel ou excessivamente complexa, economizando cr√©ditos.